import cv2
import numpy as np
import face_recognition as face_rec
import os
from datetime import datetime
import pymongo

# Initialize MongoDB client
myclient = pymongo.MongoClient("mongodb://localhost:27017")
mydb = myclient["attendance"]
mycol = mydb["attendance_records"]

# Function to resize image
def resize(img, size):
    width = int(img.shape[1] * size)
    height = int(img.shape[0] * size)
    dimension = (width, height)
    return cv2.resize(img, dimension, interpolation=cv2.INTER_AREA)

# Function to find encodings of images
def find_encoding(images):
    img_encodings = []
    for img in images:
        img = resize(img, 0.50)
        img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
        encodeimg = face_rec.face_encodings(img)[0]
        img_encodings.append(encodeimg)
    return img_encodings

# Function to mark attendance
def mark_attendance(name):
    now = datetime.now()
    time_str = now.strftime('%H:%M')
    date_str = now.strftime("%d-%m-%Y")
    if not mycol.count_documents({"name": name, "date": date_str}, limit=1):
        mydict = {"name": name, "time": time_str, "date": date_str}
        mycol.insert_one(mydict)
        print(f"{name} marked present at {time_str}")

# Load images and encode them
path = 'images'
staff_img = []
staff_name = []
myList = os.listdir(path)
for cl in myList:
    curimg = cv2.imread(f'{path}/{cl}')
    staff_img.append(curimg)
    staff_name.append(os.path.splitext(cl)[0])

EncodeList = find_encoding(staff_img)

# Start video capture
vid = cv2.VideoCapture(0)
while True:
    success, frame = vid.read()
    smaller_frame = cv2.resize(frame, (0, 0), None, 0.25, 0.25)

    # Find face locations and encodings in current frame
    faces_in_frame = face_rec.face_locations(smaller_frame)
    encode_faces_in_frame = face_rec.face_encodings(smaller_frame, faces_in_frame)

    # Iterate over found faces
    for encode_face, face_loc in zip(encode_faces_in_frame, faces_in_frame):
        matches = face_rec.compare_faces(EncodeList, encode_face)
        face_distances = face_rec.face_distance(EncodeList, encode_face)
        match_index = np.argmin(face_distances)

        if matches[match_index]:
            name = staff_name[match_index].upper()
            y1, x2, y2, x1 = face_loc
            y1, x2, y2, x1 = y1 * 4, x2 * 4, y2 * 4, x1 * 4
            cv2.rectangle(frame, (x1, y1), (x2, y2), (0, 255, 0), 3)
            cv2.rectangle(frame, (x1, y2 - 25), (x2, y2), (0, 255, 0), cv2.FILLED)
            cv2.putText(frame, name, (x1 + 6, y2 - 6), cv2.FONT_HERSHEY_COMPLEX, 1, (255, 255, 255), 2)
            mark_attendance(name)

    cv2.imshow('Video', frame)
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# Release video capture and close all windows
vid.release()
cv2.destroyAllWindows()
